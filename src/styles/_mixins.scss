/* stylelint-disable */
@use 'sass:math';

@use 'variables/sizes';
@use 'variables/zindex';
@use 'variables/fonts';

// Hover
@mixin hover {
    :global(.no-touchevents) &:hover,
    :global(.no-touchevents) &:focus-within,
    :global(.no-touchevents) &:focus-visible {
        @content;
    }
}

// Breakpoint
@mixin breakpoint($point) {
    @if $point == 'phone' {
        @media (max-width: #{sizes.$size-tablet - 1px}) {
            @content;
        }
    } @else if $point == 'phone-small' {
        @media (max-width: sizes.$size-min) {
            @content;
        }
    } @else if $point == 'not-phone' {
        @media (min-width: sizes.$size-tablet) {
            @content;
        }
    } @else if $point == 'tablet' {
        @media (min-width: sizes.$size-tablet) and (max-width: #{sizes.$size-desktop - 1px}) {
            @content;
        }
    } @else if $point == 'desktop' {
        @media (min-width: sizes.$size-desktop) {
            @content;
        }
    } @else if $point == 'hd' {
        @media (min-width: sizes.$size-hd) {
            @content;
        }
    } @else if $point == 'wxqhd' {
        @media (min-width: sizes.$size-wxqhd) {
            @content;
        }
    } @else if $point == 'not-desktop' {
        @media (max-width: #{sizes.$size-desktop - 1px}) {
            @content;
        }
    } @else if $point == 'not-hd' {
        @media (max-width: #{sizes.$size-hd - 1px}) {
            @content;
        }
    } @else if $point == 'laptop' {
        @media (min-width: sizes.$size-desktop) and (max-height: sizes.$size-laptop) {
            @content;
        }
    } @else if $point == 'landscape' {
        @media (orientation: landscape) {
            @content;
        }
    } @else if $point == 'touch' {
        @media (pointer: coarse) {
            @content;
        }
    } @else if $point == 'not-touch' {
        @media not all and (pointer: coarse) {
            @content;
        }
    } @else if $point == 'retina' {
        @media only screen and (-webkit-min-device-pixel-ratio: 2),
            only screen and (resolution >= 192dpi),
            only screen and (min-width: sizes.$size-desktop) {
            @content;
        }
    } @else if $point == 'tablet-landscape' {
        @media only screen and (width >= 768px) and (width <= 1024px) and (orientation: landscape) {
            @content;
        }
    } @else if $point == 'ipad-pro' {
        @media only screen and (width >= 1024px) and (height <= 1366px) and (orientation: portrait) and (-webkit-min-device-pixel-ratio: 1.5) {
            @content;
        }
    }
}

// Full
@mixin full($position: absolute, $offset: 0) {
    position: $position;
    left: $offset;
    right: $offset;
    top: $offset;
    bottom: $offset;
}

// Font size
@mixin font-size($size: $browser-context, $line: $line-height) {
    font-size: strip-units($size) + px;
    font-size: math.div(strip-units($size), strip-units($browser-context)) + rem;

    @if (strip-units($line) < 4) {
        line-height: strip-units($line);
    } @else {
        line-height: math.div(strip-units($line), strip-units($size));
    }
}

// Strip units
@function strip-units($value) {
    @return math.div($value, ($value * 0 + 1));
}

// z-index
@function z($list, $element) {
    $z-index: index($list, $element);

    @if $z-index {
        @return $z-index;
    }

    @warn 'There is no item "#{$element}" in this list; choose one of: #{$list}';

    @return null;
}

@mixin z-index($element, $list: $elements) {
    z-index: z($list, $element);
}

// Flex
@mixin flex($direction: row, $justify: center, $align: center, $flex: flex) {
    display: $flex;
    flex-direction: $direction;
    justify-content: $justify;
    align-items: $align;
}

// Grid
@mixin grid($columns: 12, $rows: auto, $gap-primary: $grid-gap, $gap-secondary: none) {
    display: grid;
    grid-template-columns: repeat($columns, 1fr);

    @if $rows != auto {
        grid-template-rows: repeat($rows, 1fr);
    }

    @if $gap-secondary == none {
        gap: $gap-primary;
    } @else {
        column-gap: $gap-primary;
        row-gap: $gap-secondary;
    }
}

// VW
@function vw($size, $bp: desktop, $max: true) {
    $layouts: (
        phone: 375,
        tablet: 768,
        desktop: 1280,
        hd: 1600
    );

    @if map-has-key($layouts, $bp) {
        @return calc(math.div(strip-units($size), map-get($layouts, $bp)) * #{$vw-value});
    } @else {
        @warn "Unfortunately, no value could be retrieved from `#{$bp}`.";
    }
}

// VH
@function vh($size, $bp: desktop) {
    $layouts: (
        phone: 680,
        tablet: 1024,
        desktop: 780,
        hd: 900
    );

    @if map-has-key($layouts, $bp) {
        @return math.div(strip-units($size), map-get($layouts, $bp)) * 100vh;
    } @else {
        @warn "Unfortunately, no value could be retrieved from `#{$bp}`.";
    }
}

// REM/VREM
@function vrem($size) {
    @return math.div(strip-units($size), strip-units(sizes.$browser-context)) + rem;
}

// Trim-Font - simulates leading-trim, by adjusting margins based on font-size and line-height
@function trim-font($line-height, $capitals: 'true', $trim-value: $font-trim-primary) {
    @if ($capitals == 'true') {
        @return (
                map-get($trim-value, 'top-base') + (1 - $line-height) * 10 *
                    map-get($trim-value, 'top-increment')
            )
            (
                map-get($trim-value, 'bottom-base-cap') + (1 - $line-height) * 10 *
                    map-get($trim-value, 'bottom-increment')
            );
    } @else {
        @return (
                map-get($trim-value, 'top-base') + (1 - $line-height) * 10 *
                    map-get($trim-value, 'top-increment')
            )
            (
                map-get($trim-value, 'bottom-base') + (1 - $line-height) * 10 *
                    map-get($trim-value, 'bottom-increment')
            );
    }
}

// Get a nested map key
@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}
/* stylelint-enable */
